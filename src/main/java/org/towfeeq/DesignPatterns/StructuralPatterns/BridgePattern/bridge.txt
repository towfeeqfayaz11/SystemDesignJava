Bridge Design Pattern:
    The Bridge Design Pattern is a structural design pattern that decouples an abstraction from its implementation,
    allowing both to vary independently. This pattern is especially useful when you need to avoid a permanent
    binding between abstraction and implementation or when the abstraction and implementation can evolve separately.


Key Concepts of Bridge Pattern:
    Decoupling Abstraction and Implementation:
        - The pattern separates the abstraction (what is done) from its implementation (how it is done).
        - They are connected through a "bridge" interface, allowing flexibility and independent changes.
    Avoids Class Explosion:
        - Without the bridge, you may need to create a class for every possible combination of abstraction
          and implementation. The bridge eliminates this combinatorial explosion.
    Focus on Extensibility:
        - Both the abstraction and the implementation can be extended independently, promoting flexibility and scalability.
    Real-World Analogy:
        - Think of a remote control (abstraction) and a TV brand (implementation). The remote control
          defines what actions can be performed (e.g., power, volume), while the TV brand determines
          how these actions are carried out.


Key Components of Bridge Pattern
    Abstraction:
        - The high-level control layer that defines the behavior and functionality. It maintains a
          reference to the implementation object.
    Refined Abstraction:
        - A specialized version of the abstraction. It adds more details or functionality specific
          to the refined abstraction.
    Implementor:
        - The interface for the implementation. It defines the operations that need to be implemented.
    Concrete Implementor:
        - The actual implementation of the operations defined in the Implementor interface.
    Bridge:
        - Connects the abstraction with the implementor, allowing the abstraction to delegate work to the implementor.


Key Advantages of Bridge Pattern
    Decouples Abstraction and Implementation:
        - The abstraction and implementation can evolve independently, making the system flexible and extensible.
    Reduces Class Explosion:
        - Prevents creating a new class for every possible combination of abstraction and implementation.
    Enhances Maintainability:
        - Changes in the abstraction or implementation do not affect each other.
    Improves Scalability:
        - New abstractions or implementations can be added without modifying existing code.

Drawbacks of Bridge Pattern
    Complexity:
        - The initial design may seem more complex due to the separation of abstraction and implementation.
    Overhead:
        - Adding a bridge layer can introduce slight performance overhead.

Real-World Use Cases
    GUI Toolkits:
        - Separating the abstraction (e.g., buttons, checkboxes) from the platform-specific
          implementation (e.g., Windows, macOS).
    Database Drivers:
        - Abstracting database operations (SQL queries) from the specific database type (MySQL, PostgreSQL).
    Remote Controls:
        - Abstracting remote functionality (basic/advanced) from device types (TV, Radio).