Visitor Design Pattern
    The Visitor Pattern allows you to add new operations to existing object structures without modifying
    their classes. It separates the operation logic from the object structure, enabling easy extension
    of functionality.

Key Concepts
    - Visitor: An interface or abstract class that defines a set of operations to be performed on
      different elements.
    - Concrete Visitor: Implements the operations defined in the Visitor.
    - Element: An interface or abstract class that accepts a Visitor.
    - Concrete Element: Implements the Element interface and defines the accept method,
      which passes itself to the visitor.
    - Double Dispatch: The key feature of the visitor pattern, where the operation to execute depends
      on both the type of visitor and the type of the element.


Use Cases
    Compilers:
        - Operations like syntax tree traversal, type checking, and code generation.
    UI Component Rendering:
        - Different components (buttons, text boxes) are visited by renderers.
    Reporting:
        - Generating reports for complex data structures (e.g., HTML, JSON, CSV).
    Serialization:
        - Convert objects into formats like XML, JSON, or binary.
    File System Hierarchies:
        - Operations on files and directories (e.g., calculate size, search, display).


Advantages of Visitor Pattern
    - Open/Closed Principle: You can add new operations without modifying existing classes.
    - Separation of Concerns: Operations are decoupled from the data structures.
    - Extensibility: Adding new operations is straightforward.

Limitations of Visitor Pattern
    - Dependency on Class Hierarchy: The Visitor Pattern is less effective if new elements
      (not operations) are frequently added, as all visitors must be updated.
    - Complexity: Managing multiple visitors can become complex in large systems.

















