Iterator Design Pattern
    The Iterator Design Pattern provides a way to access the elements of a collection (like a list or a set)
    sequentially without exposing the collection's underlying representation.

Key Concepts
    Iterator: An object that provides a way to traverse a collection.
    Iterable Collection: A collection that can return an iterator to allow traversal of its elements.
    Encapsulation: The iterator pattern ensures that the collection's implementation details are hidden from the client.

Components
    Iterator Interface:
        - Defines methods to traverse and access elements.
        - Example methods: hasNext(), next(), remove() (optional).
    Concrete Iterator:
        - Implements the iterator interface for a specific collection type.
    Collection Interface (or Aggregate):
        - Declares methods to create an iterator.
        - Example: createIterator() or iterator().
    Concrete Collection:
        - Implements the collection interface and provides the actual iterator object.

Use Cases for Iterator Pattern
    Traversing Collections:
        - Used in libraries like Java's java.util.Iterator or Python's iter().
    Unified Traversal:
        - Provides a standard way to traverse different types of collections (lists, trees, etc.).
    Complex Data Structures:
        - Allows navigation of complex structures like graphs or composite objects without exposing internal details.

Benefits
    Encapsulation:
        - The internal representation of the collection is hidden.
    Flexibility:
        - Multiple iterators can traverse the same collection independently.
    Polymorphism:
        - Clients use the iterator interface, so they are decoupled from the collection's specific implementation.

Limitations
    Overhead:
        - Adding iterator functionality may introduce extra complexity and memory usage.
    Immutable Collections:
        - Iterator may not work seamlessly with immutable or concurrent collections unless specifically designed.