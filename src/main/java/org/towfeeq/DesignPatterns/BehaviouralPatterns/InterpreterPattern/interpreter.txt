Interpreter Pattern
    The Interpreter Pattern is a behavioral design pattern used to define a language's grammar
    and represent sentences in that language as an abstract syntax tree (AST). It is particularly
    useful for parsing, interpreting, and evaluating expressions or instructions defined in a
    specific domain.

Key Concepts
    Grammar Representation:
        Define a class structure to represent the grammar of the language.
    Expression Tree:
        Use an abstract syntax tree to represent sentences in the language.
    Evaluation:
        Implement a method that interprets or evaluates the structure based on the defined grammar.

Characteristics of the Interpreter Pattern
    Domain-Specific Languages (DSLs):
        Ideal for implementing DSLs such as mathematical expressions, configuration parsers, or command interpreters.
    Grammar-Based Parsing:
        Models a language's grammar with recursive structures.
    Extensibility:
        Easy to add new rules or constructs.

Real-Life Analogy
    Imagine a calculator that evaluates mathematical expressions like 5 + 3 * 2. The calculator first
    parses the input into a tree-like structure and then evaluates it step-by-step using predefined
    rules for addition, multiplication, etc.

Use Cases
    - Parsing mathematical or logical expressions.
    - Configuration file interpreters.
    - Scripting language interpreters.
    - Regular expression processing.
    - Abstract Syntax Tree (AST) evaluation in compilers.

How It Works
    Abstract Expression:
        - Defines an interface for interpreting operations.
    Terminal Expression:
        - Implements operations for symbols or literals (e.g., numbers, variables).
    Non-Terminal Expression:
        - Implements operations for grammatical rules (e.g., operators like +, -).
    Context:
        - Holds global information like variable mappings or scope.



Benefits of Interpreter Pattern
    Extensibility:
        - Adding new rules or expressions (e.g., multiplication, division) is straightforward.
    Modularity:
        - Each grammatical construct is isolated in its own class.
    Clarity:
        - Clear separation between grammar definition and evaluation logic.

Limitations
    Performance:
        - Parsing and interpreting a large or complex grammar can be slow.
    Complexity:
        - Results in a large number of classes for a rich grammar.
    Scalability:
        - Not suitable for complex languages (use a parser-generator like ANTLR instead).

When to Use
    - When you need to define and evaluate simple grammars or DSLs.
    - When the grammar is fixed and doesn't change frequently.
    - When you prefer to interpret directly rather than compiling.














